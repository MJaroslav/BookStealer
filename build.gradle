buildscript {
    repositories {
        maven {
            name 'jitpack'
            url 'https://jitpack.io'
        }
        maven {
            name = "github"
            url = "https://github.com/juanmuscaria/maven/raw/master"
        }
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:[1.2-1.4.6-SNAPSHOT,)'
    }
}

repositories {
    maven {
        name 'ProfMobius Repo'
        url 'http://mobiusstrip.eu/maven'
    }
    maven {
        name 'ChickenBones Repo'
        url 'https://chickenbones.net/maven/'
    }
    maven {
        name 'jitpack'
        url 'https://jitpack.io'
    }
    mavenCentral()
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'forge'

idea.module.inheritOutputDirs = true

def buildprop = new Properties()
file("build.properties").withInputStream { buildprop.load(it) }

version = buildprop.version
group = buildprop.group
archivesBaseName = project.name

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

task devJar(type: Jar) {
    classifier('dev')
    from sourceSets.main.output
}

task sourceJar(type: Jar, dependsOn:classes) {
    classifier('sources')
    from sourceSets.main.allJava
}

artifacts {
    archives sourceJar, devJar
}

configurations {
    shade

    compile.extendsFrom(shade)
}

minecraft {
    version = "${buildprop.game_version}-${buildprop.forge_version}-${buildprop.game_version}"
    runDir = buildprop.run_dir
    replace '@VERSION@', project.version
}

dependencies {
    compile "codechicken:CodeChickenLib:${buildprop.ccl_version}:dev"
    compile "codechicken:CodeChickenCore:${buildprop.ccc_version}:dev"
    compile "codechicken:NotEnoughItems:${buildprop.nei_version}:dev"
    compile "mcp.mobius.waila:Waila:${buildprop.waila_version}"

    compileOnly "org.jetbrains:annotations:${buildprop.jetbrains_annotations_version}"

    compileOnly "org.projectlombok:lombok:${buildprop.lombok_version}"
    annotationProcessor "org.projectlombok:lombok:${buildprop.lombok_version}"

    testCompileOnly "org.projectlombok:lombok:${buildprop.lombok_version}"
    testAnnotationProcessor "org.projectlombok:lombok:${buildprop.lombok_version}"
}

processResources {
    inputs.property 'version', project.version
    inputs.property 'mcversion', project.minecraft.version
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

tasks.withType(Jar)*.doFirst {
    if ((name == "jar" || name == "devJar" || name == "sourcesJar")) {
		manifest {
			attributes "FMLAT": "${project.name.replace(" ", "").toLowerCase()}_at.cfg"
		}
		if (buildprop.coremod.toBoolean())
			manifest {
				// TODO: Don't forged about -Dfml.coreMods.load
				attributes "FMLCorePlugin": "${project.group}.${project.name.replace(" ", "").toLowerCase()}.asm.${project.name.replace(" ", "")}Plugin"
				attributes "FMLCorePluginContainsFMLMod": "true"
			}
        configurations.shade.each { dep ->
            from project.zipTree(dep)
        }
    }
}
