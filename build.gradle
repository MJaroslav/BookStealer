buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name 'forge'
            url 'https://maven.minecraftforge.net/'
        }
        maven {
            name = "github"
            url = "https://github.com/juanmuscaria/maven/raw/master"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle2:[2.3-1.0.0-SNAPSHOT,)'
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'net.minecraftforge.gradle.forge'

def modprop = new Properties()
file("mod.properties").withInputStream { modprop.load(it) }

def buildprop = new Properties()
file("build.properties").withInputStream { buildprop.load(it) }

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

version = "${buildprop.game_version}-${modprop.version}"
group = modprop.group
archivesBaseName = modprop.name

minecraft {
    version = "${buildprop.game_version}-${buildprop.forge_version}"
    runDir = buildprop.run_dir
    replace '@VERSION@', project.version
    mappings = buildprop.mappings
}

dependencies {
    compile "org.jetbrains:annotations:${buildprop.jba_version}"

    compileOnly "org.projectlombok:lombok:${buildprop.lombok_version}"
    annotationProcessor "org.projectlombok:lombok:${buildprop.lombok_version}"

    testCompileOnly "org.projectlombok:lombok:${buildprop.lombok_version}"
    testAnnotationProcessor "org.projectlombok:lombok:${buildprop.lombok_version}"
}

processResources {
    // mcmod.info expand don't work with EXCLUDE option
    // duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    includeEmptyDirs = false
    inputs.property 'version', project.version
    inputs.property 'mcversion', project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task devJar(type: Jar) {
    classifier = 'dev'
    from sourceSets.main.output
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives devJar
    archives sourcesJar
}

tasks.withType(Jar)*.doFirst {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    includeEmptyDirs = false
    if (name == "jar" || name == "devJar" || name == "sourcesJar")
        manifest {
            attributes "FMLAT": "${modprop.name}_at.cfg"
        }
}
